name: 'CI'
on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
permissions:
  contents: read
  issues: write
defaults:
  run:
    shell: bash

# 再利用可能なステップを定義
jobs:
  setup:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

  security-checks:
    needs: [setup]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    strategy:
      fail-fast: false
      matrix:
        check: [brakeman, rubocop, bundle-audit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true
      - name: Run Brakeman
        if: matrix.check == 'brakeman'
        run: bundle exec brakeman -z -q
      - name: Run Rubocop
        if: matrix.check == 'rubocop'
        run: bin/rubocop --fail-fast
      - name: Run Bundle Audit
        if: matrix.check == 'bundle-audit'
        run: bundle exec bundle audit check --update

  seim:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [setup]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true
      - name: Rails Analysis
        run: |
          bin/rails about
          bin/rails notes
          bin/rails stats
      - uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile

  tests:
    runs-on: ubuntu-latest
    timeout-minutes: 10 # テスト実行には時間がかかる可能性があるため、タイムアウトを増加
    needs: [setup]
    strategy:
      fail-fast: false
      matrix:
        test_suite: [channels, system, controllers, helpers, integration, jobs, mailers, models]
    services:
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 6380:6379
      postgres:
        image: postgres
        env:
          POSTGRES_USER: 'default'
          POSTGRES_PASSWORD: 'password'
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 5433:5432
    env:
      POSTGRES_USER: 'default'
      POSTGRES_PASSWORD: 'password'
      POSTGRESQL_AUTH_PUB: 'localhost'
      POSTGRESQL_AUTH_SUB: 'localhost'
      POSTGRESQL_DOCS_PUB: 'localhost'
      POSTGRESQL_DOCS_SUB: 'localhost'
      POSTGRESQL_CORE_PUB: 'localhost'
      POSTGRESQL_CORE_SUB: 'localhost'
      REDIS_CACHE_URL: 'redis://localhost:6380/0'
      REDIS_SESSION_URL: 'redis://localhost:6380/1'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      # 必要なシステムパッケージのインストール (テストの種類によって)
      - name: Install system packages
        if: matrix.test_suite != 'channels'
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y google-chrome-stable curl default-mysql-client libjemalloc2 libvips

      # ホスト設定 (一部のテストスイートにのみ必要)
      - name: Add hosts to /etc/hosts
        if: matrix.test_suite == 'system' || matrix.test_suite == 'integration' || matrix.test_suite == 'jobs'
        run: |
          sudo echo "127.0.0.1   com.api.localdomain net.api.localdomainc org.api.localdomain app.api.localdomain com.www.localdomain net.www.localdomain org.www.localdomain app.www.localdomain localhost" | sudo tee -a /etc/hosts

      # データベースセットアップ
      - name: Rails db:create
        run: bin/rails db:create
      - name: Rails db:migrate
        run: bin/rails db:migrate

      # テスト実行
      - name: Run tests
        if: matrix.test_suite != 'jobs' # jobs テストがコメントアウトされていたため、同じ条件を維持
        run: bin/rails test:${{ matrix.test_suite }}

      # jobs テストが必要な場合はコメントを外してください
      #- name: Run jobs tests
      #  if: matrix.test_suite == 'jobs'
      #  run: bin/rails test:jobs

  docker-build:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        environment: [production, development]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build ${{ matrix.environment }} Docker image
        if: matrix.environment == 'production'
        run: docker build --target production .
      - name: Build ${{ matrix.environment }} Docker image
        if: matrix.environment == 'development'
        run: docker compose build
