# Continuous Integration Pipeline for Umaxica Rails Application
name: 'Continuous Integration'
# Trigger events for CI pipeline
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
# Prevent multiple runs of the same workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
# Required permissions for GitHub Actions
permissions:
  contents: read
  issues: write
  checks: write
  pull-requests: write
# Default shell for all run commands
defaults:
  run:
    shell: bash
# Global environment variables
env:
  RAILS_ENV: test
  RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
  NODE_ENV: test
  CI: true
jobs:
  # Main testing job with all dependencies
  test:
    name: 'Run Tests and Quality Checks'
    runs-on: ubuntu-latest
    timeout-minutes: 25
    # Test matrix for multiple Ruby versions
    strategy:
      fail-fast: false
      matrix:
        ruby-version: ['3.4.4']
        node-version: ['22']
    # Minimal service containers for essential dependencies only
    services:
      # PostgreSQL database service (only for critical database tests)
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: umaxica_test
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 3
        ports:
          - 5432:5432
    steps:
      # Step 1: Get the source code
      - name: 'Checkout source code'
        uses: actions/checkout@v4
      # Step 2: Install system-level dependencies
      - name: 'Install system dependencies'
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y \
            libpq-dev \
            libvips-dev \
            libxml2-dev \
            libyaml-dev \
            build-essential
      # Step 3: Configure domain hosts for multi-domain application
      - name: 'Configure application domains'
        run: |
          echo '127.0.0.1 com.api.localdomain' | sudo tee -a /etc/hosts
          echo '127.0.0.1 net.api.localdomain' | sudo tee -a /etc/hosts
          echo '127.0.0.1 org.api.localdomain' | sudo tee -a /etc/hosts
          echo '127.0.0.1 app.api.localdomain' | sudo tee -a /etc/hosts
          echo '127.0.0.1 com.www.localdomain' | sudo tee -a /etc/hosts
          echo '127.0.0.1 net.www.localdomain' | sudo tee -a /etc/hosts
          echo '127.0.0.1 org.www.localdomain' | sudo tee -a /etc/hosts
          echo '127.0.0.1 app.www.localdomain' | sudo tee -a /etc/hosts
      # Step 4: Setup Ruby environment and install gems
      - name: 'Setup Ruby and install gems'
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby-version }}
          bundler-cache: true
      # Step 5: Setup Node.js environment
      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      # Step 6: Setup Bun for JavaScript package management
      - name: 'Setup Bun package manager'
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: '1.2.8'
      # Step 7: Install JavaScript dependencies
      - name: 'Install JavaScript dependencies'
        run: |
          bun install --frozen-lockfile
      # Step 8: Build JavaScript and CSS assets
      - name: 'Build frontend assets'
        run: |
          bun run build
      # Step 9: Setup test databases (simplified multi-database architecture)
      - name: 'Setup test databases'
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/umaxica_test
          # Use in-memory/file-based alternatives for CI
          REDIS_URL: memory://
          ELASTICSEARCH_URL: disabled
          KAFKA_BROKERS: disabled
        run: |
          # Create only essential databases for core functionality
          PGPASSWORD=password psql -h localhost -U postgres -c "CREATE DATABASE universal_test;"
          PGPASSWORD=password psql -h localhost -U postgres -c "CREATE DATABASE identifier_test;"
          PGPASSWORD=password psql -h localhost -U postgres -c "CREATE DATABASE business_test;"
          
          # Run Rails database setup (let Rails handle missing DBs gracefully)
          bin/rails db:create || echo "Some databases already exist"
          bin/rails db:migrate
          # Skip seeding in CI for faster execution
          # bin/rails db:seed
      # Step 10: Run security vulnerability scans
      - name: 'Run security checks'
        run: |
          # Brakeman - Ruby security scanner
          bundle exec brakeman -z -q

          # Bundle Audit - Check for vulnerable gems
          bundle exec bundle audit check --update
      # Step 11: Run code quality and style checks
      - name: 'Run code quality checks'
        run: |
          # RuboCop - Ruby style guide checker
          bundle exec rubocop --fail-fast

          # ERB Lint - Check ERB templates for best practices
          bundle exec erb_lint --lint-all
      # Step 12: Run unit and integration tests
      - name: 'Run unit and integration tests'
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/umaxica_test
          # Use disabled/mocked services for CI
          REDIS_URL: memory://
          ELASTICSEARCH_URL: disabled
          KAFKA_BROKERS: disabled
        run: |
          bin/rails test
      # Step 13: Run system tests (simplified browser-based tests)
      - name: 'Run system tests'
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/umaxica_test
          # Use disabled/mocked services for CI
          REDIS_URL: memory://
          ELASTICSEARCH_URL: disabled
          KAFKA_BROKERS: disabled
        run: |
          # TODO(human): Choose your testing strategy
          # Option 1: Skip system tests completely (current approach)
          echo "System tests skipped in CI environment"
          echo "Run 'bin/rails test:system' locally for browser testing"
          
          # Option 2: Run controller/request tests instead
          # bin/rails test:controllers
          
          # Option 3: Use headless Chrome with minimal setup
          # bin/rails test:system HEADLESS=true
      # Step 14: Generate and upload test coverage report
      - name: 'Upload test coverage report'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-ruby-${{ matrix.ruby-version }}
          path: coverage/
          retention-days: 30
      # Step 15: Upload test failure logs and screenshots
      - name: 'Upload test failure artifacts'
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-failure-logs-ruby-${{ matrix.ruby-version }}
          path: |
            log/test.log
            tmp/screenshots/
          retention-days: 7
  # Separate job for Rails project analysis
  rails-analysis:
    name: 'Rails Project Analysis'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: test
    steps:
      # Get source code
      - name: 'Checkout source code'
        uses: actions/checkout@v4
      # Setup Ruby for Rails commands
      - name: 'Setup Ruby environment'
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.4'
          bundler-cache: true
      # Analyze Rails application structure and routes
      - name: 'Generate Rails project information'
        run: |
          echo "=== Rails Application Information ==="
          bundle exec rails about

          echo "=== Rails Routes Analysis ==="
          bundle exec rails routes --unused || true

          echo "=== Code Statistics ==="
          bundle exec rails stats

          echo "=== TODOs and Notes in Code ==="
          bundle exec rails notes || true
      # Check for unused routes that should be cleaned up
      - name: 'Check for unused routes'
        run: |
          if bundle exec rails routes --unused | grep -q "No unused routes found"; then
            echo "✅ No unused routes found"
          else
            echo "⚠️ Unused routes detected:"
            bundle exec rails routes --unused
          fi
  # Separate job for dependency security analysis
  dependency-security:
    name: 'Dependency Security Analysis'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      # Get source code
      - name: 'Checkout source code'
        uses: actions/checkout@v4
      # Setup Ruby for dependency analysis
      - name: 'Setup Ruby environment'
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.4'
          bundler-cache: true
      # Setup Node.js for JavaScript dependency analysis
      - name: 'Setup Node.js environment'
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
      # Check Ruby gems for known vulnerabilities
      - name: 'Scan Ruby dependencies for vulnerabilities'
        run: |
          bundle exec bundle audit check --update
      # Check JavaScript packages for known vulnerabilities
      - name: 'Scan JavaScript dependencies for vulnerabilities'
        run: |
          npm audit --audit-level=moderate
      # Check license compatibility (optional)
      - name: 'Check license compatibility'
        run: |-
          bundle exec license_finder || echo "License finder not configured"
