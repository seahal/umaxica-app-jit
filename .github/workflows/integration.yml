name: Integration (docker-compose)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

defaults:
  run:
    shell: bash

env:
  CI: true
  RAILS_ENV: test
  NODE_ENV: test
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  test:
    name: Rails + JS tests (compose)
    runs-on: ubuntu-latest
    timeout-minutes: 40

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build images
        run: |
          docker compose build

      - name: Start dependencies (detached)
        run: |
          # Start only the infra needed for tests
          docker compose up -d primary redis zookeeper kafka minio
          # Health check for Postgres
          for i in {1..60}; do
            if docker compose exec -T primary pg_isready -U root -d db >/dev/null 2>&1; then
              echo "Postgres is ready"; break; fi
            echo "Waiting for Postgres... ($i)"; sleep 2;
          done
          docker compose ps

      - name: Run Rails and JS tests in container
        env:
          RAILS_ENV: test
          NODE_ENV: test
          CI: true
        run: |
          set -euo pipefail
          docker compose run --rm \
            -e RAILS_ENV=test -e NODE_ENV=test -e CI=true \
            main bash -lc '
              bundle config set path vendor/bundle && \
              bundle install --jobs $(nproc) && \
              bun install --frozen-lockfile && \
              bin/rails db:prepare && \
              bun run build && \
              bin/rails test all && \
              bun test \
            '

      - name: Collect coverage and logs
        if: always()
        run: |
          mkdir -p artifacts
          [ -d coverage ] && cp -a coverage artifacts/coverage || true
          [ -f log/test.log ] && cp -a log/test.log artifacts/test.log || true

      - name: Upload coverage
        if: always() && hashFiles('artifacts/coverage/**') != ''
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: artifacts/coverage/
          retention-days: 14

      - name: Upload test logs
        if: failure() && hashFiles('artifacts/test.log') != ''
        uses: actions/upload-artifact@v4
        with:
          name: test-logs
          path: artifacts/test.log
          retention-days: 7

      - name: Cleanup
        if: always()
        run: |
          docker compose down --volumes --remove-orphans || true
