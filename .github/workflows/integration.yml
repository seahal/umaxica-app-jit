# CI/CD Pipeline for Umaxica App
name: 'CI'
on:
  push:
    branches: [develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 6 * * *' # This runs the workflow daily at 06:00 UTC
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
permissions:
  contents: read
  issues: write
  checks: write
  pull-requests: write
defaults:
  run:
    shell: bash
env:
  CI: true
  RAILS_ENV: test
  RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
  NODE_ENV: test
  BUNDLE_WITH: test
  POSTGRESQL_USER: postgres
  POSTGRESQL_PASSWORD: password
jobs:
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      BUNDLE_JOBS: 4
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.7'
          bundler-cache: true
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: '1.3.1'
      - name: Install Bun dependencies
        run: bun install
      - name: Run Brakeman
        run: bundle exec brakeman -z -q
      - name: Run bundle-audit
        run: bundle exec bundle audit check --update
      - name: Run bun audit
        run: bun audit
      - name: Check unused routing config
        run: bundle exec rails routes --unused

  lint-ruby:
    name: Ruby Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      BUNDLE_JOBS: 4
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.7'
          bundler-cache: true
      - name: Run RuboCop
        run: bundle exec rubocop --fail-fast
      - name: Run ERB Lint
        run: bundle exec erb_lint --lint-all

  lint-js:
    name: JavaScript/TypeScript Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: '1.3.1'
      - name: Install Bun dependencies
        run: bun install
      - name: Run bun format
        run: bun run format
      - name: Run bun lint
        run: bun run lint
      - name: Run bun type check
        run: bun run type

  test-rails:
    name: Ruby on Rails Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      # Rails Configuration
      RAILS_ENV: test
      RACK_ENV: test
      RAILS_MAX_THREADS: 5
      # Redis (use local Redis service inside Compose)
      REDIS_URL: redis://redis:6379/0
      BUNDLE_JOBS: 4
      # App Configuration
      NAME: UMAXICA
      BRAND_NAME: UMAXICA
      PORT: 3000
      # Identifiers
      SINGLETON_DEFAULT_SALT: hoge
      IDENTIFIER_REGION_CODE: '392'
      IDENTIFIER_INSTANCE_ID: '0123456789'
      # Domain URLs
      APEX_CORPORATE_URL: com.localhost
      APEX_SERVICE_URL: app.localhost
      APEX_STAFF_URL: org.localhost
      WWW_CORPORATE_URL: www.com.localhost
      WWW_SERVICE_URL: www.app.localhost
      WWW_STAFF_URL: www.org.localhost
      API_CORPORATE_URL: api.com.localhost
      API_SERVICE_URL: api.app.localhost
      API_STAFF_URL: api.org.localhost
      SIGN_SERVICE_URL: sign.app.localhost
      SIGN_STAFF_URL: sign.org.localhost
      DOCS_CORPORATE_URL: docs.com.localhost
      DOCS_SERVICE_URL: docs.app.localhost
      DOCS_STAFF_URL: docs.org.localhost
      NEWS_CORPORATE_URL: news.com.localhost
      NEWS_SERVICE_URL: news.app.localhost
      NEWS_STAFF_URL: news.org.localhost
      HELP_CORPORATE_URL: help.com.localhost
      HELP_SERVICE_URL: help.app.localhost
      HELP_STAFF_URL: help.org.localhost
      EDGE_CORPORATE_URL: localhost:5170
      EDGE_SERVICE_URL: localhost:5171
      EDGE_STAFF_URL: localhost:5172
      # Database Configuration
      POSTGRESQL_USER: root
      POSTGRESQL_PORT: 5432
      POSTGRESQL_PASSWORD: password
      POSTGRESQL_UNIVERSAL_PUB: localhost
      POSTGRESQL_UNIVERSAL_SUB: localhost
      POSTGRESQL_GUEST_PUB: localhost
      POSTGRESQL_GUEST_SUB: localhost
      POSTGRESQL_IDENTIFIER_PUB: localhost
      POSTGRESQL_IDENTIFIER_SUB: localhost
      POSTGRESQL_PROFILE_PUB: localhost
      POSTGRESQL_PROFILE_SUB: localhost
      POSTGRESQL_TOKEN_PUB: localhost
      POSTGRESQL_TOKEN_SUB: localhost
      POSTGRESQL_BUSINESS_PUB: localhost
      POSTGRESQL_BUSINESS_SUB: localhost
      POSTGRESQL_MESSAGE_PUB: localhost
      POSTGRESQL_MESSAGE_SUB: localhost
      POSTGRESQL_NOTIFICATION_PUB: localhost
      POSTGRESQL_NOTIFICATION_SUB: localhost
      POSTGRESQL_CACHE_PUB: localhost
      POSTGRESQL_CACHE_SUB: localhost
      POSTGRESQL_SPECIALITY_PUB: localhost
      POSTGRESQL_SPECIALITY_SUB: localhost
      POSTGRESQL_STORAGE_PUB: localhost
      POSTGRESQL_STORAGE_SUB: localhost
      # Kafka Configuration
      KAFKA_BROKERS: kafka:29092
      # Mail Configuration
      RESEND_SMTP_ENDPOINT: smtp.resend.com
      RESEND_SMTP_USER_NAME: resend
      # Object Storage Configuration
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    services:
      postgres:
        image: postgres:16
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test_db
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 6379:6379
      zookeeper:
        image: confluentinc/cp-zookeeper:7.4.0
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000
      kafka:
        image: confluentinc/cp-kafka:7.4.0
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
          KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
        options: >-
          --health-cmd "kafka-broker-api-versions --bootstrap-server localhost:9092" --health-interval 30s --health-timeout 10s --health-retries 5
        ports:
          - 9092:9092
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.7'
          bundler-cache: true
      - name: Setup test databases
        run: |
          bin/rails db:create
          bin/rails db:migrate
      - name: Run Rails tests
        run: bundle exec rails test
      - name: Run Rails Server tests
        run: |
          RAILS_ENV=production bundle exec rails server -d
          sleep 3
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://com.localhost:3000)
          if [ "$HTTP_CODE" = "200" ]; then
            echo "Success: Server returned HTTP $HTTP_CODE"
            exit 0
          else
            echo "Error: Server returned HTTP $HTTP_CODE (expected 200)"
            exit 1
          fi
      - name: Upload test coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: rails-coverage-report
          path: coverage/
          retention-days: 30
      - name: Upload test logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: rails-test-logs
          path: |
            log/test.log
            tmp/screenshots/
          retention-days: 7
  test-js:
    name: Bun & Co. Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: '1.3.1'
      - name: Install Bun dependencies
        run: bun install
      - name: Build JavaScript assets
        run: bun run build
      - name: Run JavaScript tests with coverage
        run: bun test --coverage --coverage-reporter=lcov
      - name: Prepare coverage artifact
        if: always()
        run: |
          mkdir -p coverage/bun
          if [ -f coverage/lcov.info ]; then
            mv coverage/lcov.info coverage/bun/lcov.info
          else
            echo "No Bun coverage file generated"
          fi
      - name: Upload test coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: js-coverage-report
          path: coverage/bun/
          retention-days: 30
  image-check:
    name: Security Scan
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Build an image from Dockerfile
        run: docker build . --target production -t asia-northeast1-docker.pkg.dev/umaxica-454904/staging/sample:${{ github.sha }} -f Dockerfile
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'asia-northeast1-docker.pkg.dev/umaxica-454904/staging/sample:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
