name: 'jit'
services:
  main:
    build:
      context: ./
      target: development
      args:
        COMMIT_HASH: 'abcdef'
    command: /bin/sh ./docker/main/entrypoint.sh
    restart: always
    tty: true
    stdin_open: true
    extra_hosts:
      - "com.api.localdomain:127.0.0.1"
      - "org.api.localdomain:127.0.0.1"
      - "app.api.localdomain:127.0.0.1"
      - "com.www.localdomain:127.0.0.1"
      - "org.www.localdomain:127.0.0.1"
      - "app.www.localdomain:127.0.0.1"
      - "com.docs.localdomain:127.0.0.1"
      - "app.docs.localdomain:127.0.0.1"
      - "org.docs.localdomain:127.0.0.1"
      - "com.news.localdomain:127.0.0.1"
      - "app.news.localdomain:127.0.0.1"
      - "org.news.localdomain:127.0.0.1"
    ports:
      - "3333:3000"
    volumes:
      - ./:/main
    networks:
      - backend
      - frontend
    depends_on:
      - primary
      - replica
      - elasticsearch
      - kafka
      - redis
  primary:
    image: postgres:16.6
    command: -c 'config_file=/etc/postgresql/postgresql.conf' -c 'hba_file=/etc/postgresql/pg_hba.conf'
    networks:
      - backend
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: password
      TZ: UTC
      POSTGRES_HOST_AUTH_METHOD: trust # NOTE: Development only
      POSTGRES_INITDB_WAL_LEVEL: replica # wal_level setting
      POSTGRES_INITDB_MAX_WAL_SENDERS: 10 # max_wal_senders setting
      POSTGRES_INITDB_MAX_REPLICATION_SLOTS: 10 # max_replication_slots setting
      POSTGRES_DB: db
    tmpfs: /var/lib/postgresql/data
    ports:
      - "5433:5432"
    volumes:
      - ./docker/psql-pub/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./docker/psql-pub/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./docker/psql-pub/init.sh:/docker-entrypoint-initdb.d/init.sh
  replica:
    image: postgres:16.6
    entrypoint: /entrypoint.sh
    networks:
      - backend
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: password
      TZ: UTC
      POSTGRES_HOST_AUTH_METHOD: trust # NOTE: Development only
      POSTGRES_DB: db
    ports:
      - "5434:5432"
    tmpfs: /var/lib/postgresql/data
    volumes:
      - ./docker/psql-sub/entrypoint.sh:/entrypoint.sh
      - ./docker/psql-sub/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./docker/psql-sub/pg_hba.conf:/etc/postgresql/pg_hba.conf
    depends_on:
      - primary
  redis:
    image: valkey/valkey:8.1.1-alpine3.21
    ports:
      - "6379:6379"
    networks:
      - backend
    volumes:
      - redis-volume:/data
  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - backend
  kafka:
    image: confluentinc/cp-kafka:7.9.0
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
    networks:
      - backend
  kafka-ui:
    container_name: kafka-ui
    image: ghcr.io/kafbat/kafka-ui:v1.2.0
    ports:
      - "8080:8080"
    depends_on:
      - kafka
    restart: always
    environment:
      KAFKA_CLUSTERS_0_NAME: local-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    networks:
      - backend
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.0
    container_name: elasticsearch
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    volumes:
      - elasticsearch-volume:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - backend
    restart: always
  grafana:
    image: grafana/grafana:latest
    ports:
      - 8000:3000
    volumes:
      - grafana-volume:/var/lib/grafana
      # Add config files if available
      # - ./docker/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - backend
    depends_on:
      - prometheus
      - loki
      - tempo
      - elasticsearch
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - prometheus-volume:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - observility
    restart: always
  # Log collection
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - loki-volume:/tmp/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - observility
    restart: always
  # Distributed tracing
  tempo:
    image: grafana/tempo:latest
    command: -config.file=/etc/tempo.yaml  # .yaml から .yml に変更
    volumes:
    - ./docker/tempo/tempo.yaml:/etc/tempo.yaml  # ファイル名とパスを変更
    - tempo-volume:/tmp/tempo
    ports:
      - "14268:14268"  # jaeger ingest
      - "3200:3200"   # tempo
      - "9095:9095" # tempo grpc
      - "4317:4317"  # otlp grpc
      - "4318:4318"  # otlp http
      - "9411:9411"   # zipkin
    depends_on:
      - main
volumes:
  psql-pub-volume:
  psql-sub-volume:
  redis-volume:
  kafka-broker-volume:
  grafana-volume:
  prometheus-volume:
  loki-volume:
  tempo-volume:
  elasticsearch-volume:
  bundle-volume:
networks:
  backend:
  frontend:
  observility:
