name: 'jit'
services:
  psql-pub:
    image: postgres:16.6
    networks:
      - backend
    environment:
      POSTGRES_USER: default
      POSTGRES_PASSWORD: password
      TZ: UTC
      POSTGRES_HOST_AUTH_METHOD: trust # NOTE: 開発用のため
      POSTGRES_INITDB_WAL_LEVEL: replica # wal_levelの設定
      POSTGRES_INITDB_MAX_WAL_SENDERS: 10 #max_wal_sendersの設定
      POSTGRES_INITDB_MAX_REPLICATION_SLOTS: 10 #max_replication_slotsの設定
    ports:
      - "5433:5432"
    volumes:
#      - psql-pub-volume:/var/lib/postgresql/data
      - ./docker/psql-pub/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./docker/psql-pub/pg_hba.conf:/etc/postgresql/pg_hba.conf
  psql-sub:
    image: postgres:16.6
    networks:
      - backend
    environment:
      POSTGRES_USER: default
      POSTGRES_PASSWORD: password
      TZ: UTC
      POSTGRES_HOST_AUTH_METHOD: trust # NOTE: 開発用のため
    ports:
      - "5434:5432"
    volumes:
#      - psql-sub-volume:/var/lib/postgresql/data
      - ./docker/psql-sub/init.sh:/docker-entrypoint-initdb.d/init.sh
    depends_on:
      - psql-pub
  sqlite:
    image: keinos/sqlite3
    stdin_open: true
    tty: true
    volumes:
      - ./docker/sqlite:/root/db/
  minio:
    image: minio/minio:RELEASE.2025-02-07T23-21-09Z-cpuv1
    volumes:
      - minio-data-1:/data
    command: server --console-address ":9001" /data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - backend
    environment:
      MINIO_ROOT_USER: default
      MINIO_ROOT_PASSWORD: password
      MINIO_DEFAULT_BUCKETS: application
  vk-session: # AWS MemoryDB
    image: 'valkey/valkey:7.2'
    networks:
      - backend
    ports:
      - "6380:6379"
    volumes:
      - vk-session-data:/data
  vk-cache: # AWS ElastiCache
    image: 'valkey/valkey:8.0'
    volumes:
      - vk-cache-volume:/data
    networks:
      - backend
    ports:
      - '6379:6379'
  kafka-broker:
    image: apache/kafka:latest
    volumes:
      - kafka-broker-volume:/tmp
    networks:
      - backend
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://localhost:9092,CONTROLLER://localhost:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
  main:
    build:
      context: ./
      target: development
      args:
        COMMIT_HASH: 'abcdef'
    command: bin/rails server -p 3000 -b 0.0.0.0
    restart: always
    user: "1000:1000"
    tty: true
    stdin_open: true
    ports:
      - "3333:3000"
    volumes:
      - ./:/main
    networks:
      - backend
    depends_on:
      - vk-cache
      - vk-session
      - minio
  chromium:
    image: seleniarm/standalone-chromium
    restart: always # コンテナが停止すると常に再起動
    environment:
      VNC_NO_PASSWORD: 1
    networks:
      - frontend
    ports:
      - "4444:4444"
      - "7900:7900"
    depends_on:
      - main
  firefox:
    image: selenium/standalone-firefox
    restart: always # コンテナが停止すると常に再起動
    networks:
      - frontend
    ports:
      - "4445:4444"
      - "7901:7900"
    depends_on:
      - main
volumes: #
  psql-pub-volume:
  psql-sub-volume:
  vk-session-data:
  vk-cache-volume:
  opensearch-volume:
  minio-data-1:
  sqlite-volume:
  kafka-broker-volume:
networks:
  backend:
  frontend:
