name: 'jit'
services:
  main:
    build:
      context: ./
      target: development
      args:
        COMMIT_HASH: 'abcdef'
    command: /bin/sh -c "bin/dev"
    restart: always
    tty: true
    stdin_open: true
    extra_hosts:
      - "com.api.localdomain:127.0.0.1"
      - "net.api.localdomain:127.0.0.1"
      - "org.api.localdomain:127.0.0.1"
      - "app.api.localdomain:127.0.0.1"
      - "com.www.localdomain:127.0.0.1"
      - "net.www.localdomain:127.0.0.1"
      - "org.www.localdomain:127.0.0.1"
      - "app.www.localdomain:127.0.0.1"
    ports:
      - "3333:3000"
    volumes:
      - ./:/main
    networks:
      - backend
      - frontend
    depends_on:
      - vk-cache
      - vk-session
      - minio
      - kafka-ui
      - kafka
      - primary
      - replica
      - zookeeper
  primary:
    image: postgres:16.6
    command: -c 'config_file=/etc/postgresql/postgresql.conf' -c 'hba_file=/etc/postgresql/pg_hba.conf'
    networks:
      - backend
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: password
      TZ: UTC
      POSTGRES_HOST_AUTH_METHOD: trust # NOTE: 開発用のため
      POSTGRES_INITDB_WAL_LEVEL: replica # wal_levelの設定
      POSTGRES_INITDB_MAX_WAL_SENDERS: 10 #max_wal_sendersの設定
      POSTGRES_INITDB_MAX_REPLICATION_SLOTS: 10 #max_replication_slotsの設定
      POSTGRES_DB: db
    tmpfs: /var/lib/postgresql/data
    ports:
      - "5433:5432"
    volumes:
      - ./docker/psql-pub/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./docker/psql-pub/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./docker/psql-pub/init.sh:/docker-entrypoint-initdb.d/init.sh
  replica:
    image: postgres:16.6
    entrypoint: /entrypoint.sh
    networks:
      - backend
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: password
      TZ: UTC
      POSTGRES_HOST_AUTH_METHOD: trust # NOTE: 開発用のため
      POSTGRES_DB: db
    ports:
      - "5434:5432"
    tmpfs: /var/lib/postgresql/data
    volumes:
      - ./docker/psql-sub/entrypoint.sh:/entrypoint.sh
      - ./docker/psql-sub/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./docker/psql-sub/pg_hba.conf:/etc/postgresql/pg_hba.conf
    depends_on:
      - primary
  minio:
    image: minio/minio:RELEASE.2025-02-07T23-21-09Z-cpuv1
    volumes:
      - minio-data-1:/data
    command: server --console-address ":9001" /data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - backend
    environment:
      MINIO_ROOT_USER: default
      MINIO_ROOT_PASSWORD: password
      MINIO_DEFAULT_BUCKETS: application
  vk-session: # AWS MemoryDB
    image: 'valkey/valkey:7.2'
    networks:
      - backend
    ports:
      - "6380:6379"
    volumes:
      - vk-session-data:/data
  vk-cache: # AWS ElastiCache
    image: 'valkey/valkey:8.0'
    volumes:
      - vk-cache-volume:/data
    networks:
      - backend
    ports:
      - '6379:6379'
  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
  kafka:
    image: confluentinc/cp-kafka:7.9.0
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
  kafka-ui:
    container_name: kafka-ui
    image: ghcr.io/kafbat/kafka-ui:v1.2.0
    ports:
      - "8080:8080"
    depends_on:
      - kafka
    restart: always
    environment:
      KAFKA_CLUSTERS_0_NAME: local-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
  grafana:
    image: grafana/grafana:latest
    ports:
      - 8000:3000
    volumes:
      - grafana-volume:/var/lib/grafana
volumes: #
  psql-pub-volume:
  psql-sub-volume:
  vk-session-data:
  vk-cache-volume:
  opensearch-volume:
  minio-data-1:
  sqlite-volume:
  kafka-broker-volume:
  grafana-volume:
networks:
  backend:
  frontend:
